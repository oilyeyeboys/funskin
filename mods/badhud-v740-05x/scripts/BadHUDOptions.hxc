import funkin.modding.module.Module;
import funkin.ui.options.OptionsState;

import flixel.util.FlxSave;

import Std;
import funkin.ui.options.items.NumberPreferenceItem;

class BadHUDOptions extends Module {
    var save:FlxSave = new FlxSave() ;

    // Hooks or smth like that for other classes
    var font:String;
    var timeBarBGStyle;
    var timeTextSize;

    function new() {
        super("BadHUD Options", 1);
        save = new FlxSave();
        save.bind("BadHUDOptions", "FunkinCrew/BadHUD");

        // Default Options (First Start)
        save.data.middlescroll = (save.data.middlescroll != null) ? save.data.middlescroll : false;
        save.data.oppNotes = (save.data.oppNotes != null) ? save.data.oppNotes : false;
        save.data.healthBarPosition = (save.data.healthBarPosition != null) ? save.data.healthBarPosition : 1;
        save.data.healthIconPos = (save.data.healthIconPos != null) ? save.data.healthIconPos : 1;
        save.data.timebarPosition = (save.data.timebarPosition != null) ? save.data.timebarPosition : 1;
        save.data.timebarType = (save.data.timebarType != null) ? save.data.timebarType : 1;
        save.data.timebarStyle = (save.data.timebarStyle != null) ? save.data.timebarStyle : 0;
        save.data.restBar = (save.data.restBar != null) ? save.data.restBar : 0;
        save.data.leftPos = (save.data.leftPos != null) ? save.data.leftPos : 1;
        save.data.hudOpacity = (save.data.hudOpacity != null) ? save.data.hudOpacity : 100;
        save.data.hudFont = (save.data.hudFont != null) ? save.data.hudFont : 0;
        save.data.hudFontSize = (save.data.hudFontSize != null) ? save.data.hudFontSize : 21;
        save.data.accuracyType = (save.data.accuracyType != null) ? save.data.accuracyType : 0;
        save.data.commaSeparatedScore = (save.data.commaSeparatedScore != null) ? save.data.commaSeparatedScore : false;
        save.data.popUpType = (save.data.popUpType != null) ? save.data.popUpType : 1;
        save.data.muteMiss = (save.data.muteMiss != null) ? save.data.muteMiss : false;
        save.data.underlayOpacity = (save.data.underlayOpacity != null) ? save.data.underlayOpacity : 0;
        save.data.kpsCounter = (save.data.kpsCounter != null) ? save.data.kpsCounter : false;
        save.data.customScrollSpeed = (save.data.customScrollSpeed != null) ? save.data.customScrollSpeed : false;
        save.data.scrollSpeedFactor = (save.data.scrollSpeedFactor != null) ? save.data.scrollSpeedFactor : 18;

        updatetypetext();
        save.flush();
    }

    override function onStateChangeEnd(event:StateChangeScriptEvent) {
        if (Std.isOfType(event.targetState, OptionsState)) {
            var preferences = event.targetState.pages.get("preferences");
            if (preferences != null) {
                updatetypetext();

                preferences.createPrefItemCheckbox("Middlescroll", "", (value) -> {
                    save.data.middlescroll = value; }, save.data.middlescroll);

                preferences.createPrefItemCheckbox("Hide Opponent Notes", "", (value) -> {
                    save.data.oppNotes = value; }, save.data.oppNotes);

                // Bars
                preferences.items.createItem(120, 120 * preferences.items.length + 30, "Bars :", "bold", function() {});

                preferences.createPrefItemEnum("Health Bar Position", "Changes position of the Health Bar", [
                    "0" => "Off",
                    "1" => "Vanilla",
                    "2" => "Vertical"
                ], (value) -> { save.data.healthBarPosition = Std.parseInt(value); }, save.data.healthBarPosition);

                preferences.createPrefItemEnum("Health Icons Position", "Change the Health Icon position", [
                    "0" => "Off",
                    "1" => "Vanilla",
                    "2" => "Flipped",
                    "3" => "Ends"
                ], (value) -> { save.data.healthIconPos = Std.parseInt(value); }, save.data.healthIconPos);

                preferences.createPrefItemEnum("Time Bar Position", "Changes position of the Time Bar", [
                    "0" => "Off",
                    "1" => "Down",
                    "2" => "Up",
                    "3" => "Vertical"
                ], (value) -> { save.data.timebarPosition = Std.parseInt(value); }, save.data.timebarPosition);

                preferences.createPrefItemEnum("Time Bar Display", "Changes the display of the Time Bar", [
                    "0" => "Off",
                    "1" => "Time Left",
                    "2" => "Time Left / Total",
                    "3" => "Elapsed",
                    "4" => "Elapsed / Total",
                    "5" => "Elapsed / Time Left",
                    "6" => "Song Name"
                ], (value) -> { save.data.timebarType = Std.parseInt(value); }, save.data.timebarType);

                preferences.createPrefItemEnum("Time Bar Style", "Changes the style of the Time Bar", [
                    "0" => "Psych Engine",
                    "1" => "Minimal",
                    "2" => "Minimal Rounded"
                ], (value) -> { save.data.timebarStyle = Std.parseInt(value); }, save.data.timebarStyle);

                preferences.createPrefItemEnum("Rest Bar Display", "Changes the display of the Rest Bar", [
                    "0" => "Off",
                    "1" => "Countdown",
                    "2" => "Countup"
                ], (value) -> { save.data.restBar = Std.parseInt(value); }, save.data.restBar);

                // HUD Customization
                preferences.items.createItem(120, 120 * preferences.items.length + 30, "HUD Customization :", "bold", function() {});

                preferences.createPrefItemEnum("on Left", "Left side elements", [
                    "0" => "None",
                    "1" => "Judgements",
                    "2" => "Stats",
                    "3" => "Judgements and Stats",
                ], (value) -> { save.data.leftPos = Std.parseInt(value); }, save.data.leftPos);

                preferences.createPrefItemPercentage("HUD Opacity", "Changes the opacity of the HUD", (value) -> {
                    save.data.hudOpacity = value; }, save.data.hudOpacity);

                preferences.createPrefItemEnum("HUD Font", "Changes the font of the HUD", [
                    "0" => "VCR OSD Mono (Vanilla)",
                    "1" => "VCR OSD Neue",
                    "2" => "Minecraft",
                    "3" => "Retro Gaming",
                    "4" => "Roblox",
                    "5" => "Super Mario 64",
                    "6" => "New Super Mario Font U",
                    "7" => "Karmatic Arcade"
                ], (value) -> { save.data.hudFont = Std.parseInt(value); }, save.data.hudFont);

                preferences.createPrefItemNumber("HUD Font Size", "Changes the size of the HUD text", function(value) {
                    save.data.hudFontSize = Std.int(value);
                }, null, save.data.hudFontSize, 0, 999, 1, 0);

                // Extras
                preferences.items.createItem(120, 120 * preferences.items.length + 30, "Extras :", "bold", function() {});

                preferences.createPrefItemEnum("Accuracy Type", "Change the accuracy/score system (visually)", [
                    "0" => "Vanilla",
                    "1" => "Psych Engine",
                    "2" => "osu!Mania"
                ], (value) -> { save.data.accuracyType = Std.parseInt(value); }, save.data.accuracyType);

                preferences.createPrefItemCheckbox("Comma Separated Score", "", (value) -> {
                    save.data.commaSeparatedScore = value; }, save.data.commaSeparatedScore);

                preferences.createPrefItemEnum("Combo Pop Ups", "Change the Combo Pop Ups", [
                    "0" => "Off",
                    "1" => "Vanilla",
                    "2" => "Centered"
                ], (value) -> { save.data.popUpType = Std.parseInt(value); }, save.data.popUpType);

                preferences.createPrefItemCheckbox("Mute Miss Sounds", "", (value) -> {
                    save.data.muteMiss = value; }, save.data.muteMiss);

                var underlayOpacityItem = new NumberPreferenceItem(0, (120 * preferences.items.length) + 30, "Note Underlay Opacity",
                save.data.underlayOpacity, 0, 100, 5, 0,
                (value) -> { save.data.underlayOpacity = Std.int(value); },
                (value) -> return save.data.underlayOpacity + "%"
                );
                preferences.items.addItem("Note Underlay Opacity", underlayOpacityItem);
                preferences.preferenceItems.add(underlayOpacityItem.lefthandText);

                preferences.createPrefItemCheckbox("Show KPS Counter", "", (value) -> {
                    save.data.kpsCounter = value; }, save.data.kpsCounter);

                preferences.createPrefItemCheckbox("Custom Scroll Speed", "", (value) -> {
                    save.data.customScrollSpeed = value; }, save.data.customScrollSpeed);

                preferences.createPrefItemNumber("Scroll Speed Factor", "Changes the speed of the notes",
                (value) -> { save.data.scrollSpeedFactor = value; },
                (value) -> return save.data.scrollSpeedFactor / 10,
                save.data.scrollSpeedFactor, 1, 9999, 1, 0);
            }
        }
    }

    function updatetypetext() {
        switch (save.data.timebarStyle) {
            case 0:
                timeBarBGStyle = "timeBarPsychEngine";
                timeTextSize = 26;
            case 1:
                timeBarBGStyle = "timeBarMinimal";
                timeTextSize = 20;
            case 2:
                timeBarBGStyle = "timeBarMinimalRounded";
                timeTextSize = 24;
        }

        switch (save.data.hudFont) {
            case 0: // px = 21;
                font = "vcr.ttf";
            case 1: // px = 16;
                font = "VCRosdNEUE.ttf";
            case 2: // px = 16;
                font = "Minecraft.ttf";
            case 3: // px = 11;
                font = "Retro Gaming.ttf";
            case 4: // px = ?;
                font = "RobloxFont-Regular.ttf";
            case 5: // px = ?;
                font = "Super Mario 64.ttf";
            case 6: // px = ?;
                font = "New Super Mario Font U.ttf";
            case 7: // px = ?;
                font = "ka1.ttf";
        }

        save.flush();
    }
}