import funkin.modding.module.Module;
import funkin.graphics.FunkinSprite;
import funkin.play.PauseSubState;
import funkin.play.PlayState;
import funkin.Paths;

import flixel.text.FlxTextBorderStyle;
import flixel.text.FlxText;
import flixel.tweens.FlxEase;
import flixel.tweens.FlxTween;
import flixel.util.FlxSave;
import flixel.util.FlxStringUtil;
import flixel.ui.FlxBar;
import flixel.FlxG;

import Std;

// This script may have used some code from other scripts so iÂ´ll leave some credits below
/*
Psych Engine HUD V-Slice by nubz4lif
OG Psych Engine HUD by Shadow Mario and his team
*/
class TimeBar extends Module {
    var save:FlxSave;
    var state:PlayState;
    var loaded:Bool = false ;

    var timeBarBG:FunkinSprite;
    var timeBar:FlxBar;
    var timeText:FlxText;

    function new() {
        super("TimeBar");
        save = new FlxSave();
        save.bind("BadHUDOptions", "FunkinCrew/BadHUD");
    }

    override function onSongLoaded(event:SongLoadScriptEvent) {
        if (save.data.timebarPosition != 0) {
            if (PlayState.instance == null) return;
            state = PlayState.instance;

            if (!loaded) initTimeBar();
            loaded = true;
        }
    }

    function initTimeBar() {
        // Binding with BadHUDOptions
        var badHUDOptions = new BadHUDOptions();

        var timeBarXPosV = FlxG.width * 0.82;
        var timeBarYPosV = FlxG.height * 0.5;

        timeBarBG = FunkinSprite.create(0, 0, badHUDOptions.timeBarBGStyle);
        timeBarBG.scrollFactor.set(0, 0);
        timeBarBG.zIndex = 800;

        var timeBarHeight = timeBarBG.height - (save.data.timeBarType == 0 ? 6 : 4);
        timeBar = new FlxBar(0, 0, null, timeBarBG.width - 5, timeBarHeight);
        timeBar.createFilledBar(0xFF000000, 0xFFFFFFFF);
        timeBar.scrollFactor.set();
        timeBar.zIndex = save.data.timebarStyle == 2 ? 799 : 801;

        timeText = new FlxText(0, 0, 400, "", 32);
        timeText.setFormat(Paths.font(badHUDOptions.font), badHUDOptions.timeTextSize, 0xFFFFFFFF, "center", FlxTextBorderStyle.OUTLINE, 0xFF000000);
        timeText.borderSize = 1.75;
        timeText.scrollFactor.set();
        timeText.zIndex = 802;

        switch (save.data.timebarPosition) {
            case 0: // Off
            case 1: // Down
                timeText.y = FlxG.height - 34;
                timeBarBG.y = FlxG.height - 34 + 2;
                if (save.data.hudFont == 0) {
                    timeBarBG.y = timeText.y + 5;
                }
            case 2: // Up
                timeText.y = 16;
                timeBarBG.y = timeText.y + 2;
                if (save.data.hudFont == 0) {
                    timeBarBG.y = timeText.y + 5;
                }
            case 3: // Vertical (Right Side)
                timeText.x = timeBarXPosV;
                timeText.y = timeBarYPosV;
                timeBarBG.x = timeBarXPosV + (timeText.height / 5);
                timeBarBG.y = timeBarYPosV;
                timeText.angle = timeBarBG.angle = timeBar.angle = 90;
                if (!state.isMinimalMode) timeText.zIndex = state.iconP1.zIndex + 1;
        }

        timeBar.x = timeBarBG.x + 3;
        timeBar.y = timeBarBG.y + (save.data.timeBarType == 0 ? 3 : 2);

        if (!save.data.timebarPosition == 3) { // Vertical Time Bar
            timeText.screenCenter(0x01);
            timeBarBG.screenCenter(0x01);
            timeBar.screenCenter(0x01);
        }

        state.add(timeBarBG);
        state.add(timeBar);
        state.add(timeText);

        // Move the time bar to the HUD camera.
        timeBarBG.cameras = [state.camHUD];
        timeBar.cameras = [state.camHUD];
        timeText.cameras = [state.camHUD];

        // Time bar is Invisible at first
        timeBarBG.visible = false;
        timeBar.visible = false;
        timeText.visible = false;
    }

    override function onSongStart(event:ScriptEvent) {
        var timeBarObjects = [timeBarBG, timeBar, timeText];

        for (obj in timeBarObjects) {
            if (obj != null && (obj.alpha != (save.data.hudOpacity / 100) || !obj.visible)) {
                obj.alpha = 0;

                FlxTween.tween(obj, {alpha: save.data.hudOpacity / 100}, 0.5, {ease: FlxEase.circOut});
                obj.visible = true;
            }
        }
    }

    override function onUpdate(event:UpdateScriptEvent) {
        if (PlayState.instance == null || !loaded || save.data.timebarPosition == 0) return;

        if (timeBar != null && timeBar.visible) {
            timeBar.value = (state.conductorInUse.songPosition / state.currentSongLengthMs) * 100;
            timeBar.updateBar();
            var time;
            switch (save.data.timebarType) {
                case 0: // Off
                case 1: // Time Left
                    time = FlxStringUtil.formatTime((state.currentSongLengthMs - state.conductorInUse.songPosition) / 1000, false);
                    timeText.text = time;
                case 2: // Time Left / Total
                    time = FlxStringUtil.formatTime((state.currentSongLengthMs - state.conductorInUse.songPosition) / 1000, false) + " / " + FlxStringUtil.formatTime(state.currentSongLengthMs / 1000, false);
                    timeText.text = time;
                case 3: // Elapsed
                    time = FlxStringUtil.formatTime((state.conductorInUse.songPosition) / 1000, false);
                    timeText.text = time;
                case 4: // Elapsed / Total
                    time = FlxStringUtil.formatTime((state.conductorInUse.songPosition) / 1000, false) + " / " + FlxStringUtil.formatTime(state.currentSongLengthMs / 1000, false);
                    timeText.text = time;
                case 5: // Elapsed / Total
                    time = FlxStringUtil.formatTime((state.conductorInUse.songPosition) / 1000, false) + " / " + FlxStringUtil.formatTime((state.currentSongLengthMs - state.conductorInUse.songPosition) / 1000, false);
                    timeText.text = time;
                case 6: // Song Name
                    timeText.text = state.currentChart.songName;
            }
        }
    }

    // Cleanup stuff
    override function onSongRetry(event:ScriptEvent) {
        var stuffToHide = [timeBarBG, timeBar, timeText];

        for (thing in stuffToHide) {
            if (thing != null) thing.visible = false;
        }
    }

    override function onSubStateOpenBegin(event:SubStateScriptEvent) {
        if (!Std.isOfType(event.targetState, PlayState) && !Std.isOfType(event.targetState, PauseSubState)) {
            cleanup();
        }
    }

    override function onSubStateCloseBegin(event:SubStateScriptEvent) {
        if (Std.isOfType(event.targetState, PlayState)) {
            cleanup();
        }
    }

    override function onSongEnd(event:ScriptEvent) { cleanup(); }

    override function onDestroy(event:ScriptEvent) { cleanup(); }

    function cleanup() {
        var timeBarObjects = [timeBarBG, timeBar, timeText];

        for (obj in timeBarObjects) {
            if (obj != null) {
                FlxTween.tween(obj, {alpha: 0}, 0.5, {ease: FlxEase.circOut});
            }
        }

        timeBarBG = null;
        timeBar = null;
        timeText = null;
        loaded = false;
    }
}