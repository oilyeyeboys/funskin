import funkin.modding.module.Module;
import funkin.play.PauseSubState;
import funkin.play.PlayState;

import flixel.math.FlxMath;
import flixel.util.FlxSave;
import flixel.FlxG;
import flixel.FlxSprite;

import Std;

class BadHealthBar extends Module {
    var save:FlxSave;
    var state:PlayState;
    var loaded:Bool = false ;
    var iconP1:FlxSprite;
    var iconP2:FlxSprite;

    var LOSING_THRESHOLD:Float = 0.4 ;
    var WINNING_THRESHOLD:Float = 1.6 ;
    var MAXIMUM_HEALTH:Float = 2 ;
    var POSITION_OFFSET:Int = 26 ;

    var excludedSongs = ["Silly Billy",
    "Mushroom Plains", "Bricks and Lifts", "Lethal Lava Lair", "Deep Deep Voyage", "Hop-Hop Heights", "Koopa Armada", "2 PLAYER GAME", "Destruction Dance", "Portal Power",
    "Bullet Time", "Boo Blitz", "Cross Console Clash", "Love's End", "Hyperactive Starblaze", "Dream Machine", "Overload", "Eradication", "Ultraviolet", "Amarillo", "Parasiticide", "wokemindvirus", "REAGANOMICS 2",
        // Indie Cross
    "Snake-Eyes", "Technicolor-Tussle", "Knockout", "Whoopee", "Sansational", "Burning-In-Hell", "Imminent-Demise", "Terrible-Sin", "Last-Reel", "Nightmare-Run", "Satanic-Funkin", "Final-Stretch",
        // Summer Break Special
    "Tomo", "Knucklehead", "Spunk", "Ghoulish"] ;

    function new() {
        super("BadHealthBar");
        save = new FlxSave();
        save.bind("BadHUDOptions", "FunkinCrew/BadHUD");
    }

    override function onSongLoaded(event:SongLoadScriptEvent) {
        if (PlayState.instance == null) return;
        state = PlayState.instance;
        if (excludedSongs.indexOf(state.currentChart.songName) != -1) return;
        loaded = true;
        iconP1 = state.iconP1;
        iconP2 = state.iconP2;

        // Health Bar
        if (save.data.healthBarPosition != 0) {
            if (save.data.healthBarPosition == 2) {
                // Vertical HP Bar
                state.healthBar.x = FlxG.width * 0.7;
                state.healthBar.y = FlxG.height * 0.5;
                state.healthBar.angle = 90;
                state.healthBarBG.angle = 90;

                if (!state.isMinimalMode) {
                    if (iconP1 != null) iconP1.autoUpdate = false;
                    if (iconP2 != null) iconP2.autoUpdate = false;
                }
            }
            state.healthBarBG.setPosition(state.healthBar.x - 4, state.healthBar.y - 4);
            if (!state.isMinimalMode) {
                if (iconP1 != null) iconP1.alpha = save.data.hudOpacity / 100;
                if (iconP2 != null) iconP2.alpha = save.data.hudOpacity / 100;
            }
            state.healthBar.alpha = save.data.hudOpacity / 100;
            state.healthBarBG.alpha = save.data.hudOpacity / 100;
        } else {
            state.healthBar.visible = false;
            state.healthBarBG.visible = false;
            if (!state.isMinimalMode) {
                if (iconP1 != null) iconP1.visible = false;
                if (iconP2 != null) iconP2.visible = false;
            }
        }

        // Health Icon Positions
        if (!state.isMinimalMode) {
            switch (save.data.healthIconPos) {
                case 0: // Off
                    if (iconP1 != null) iconP1.visible = false;
                    if (iconP2 != null) iconP2.visible = false;
                case 1: // Default
                case 2: // Flipped
                    if (iconP1 != null) iconP1.flipX = false;
                    if (iconP2 != null) iconP2.flipX = true;
                case 3: // Ends
                    var healthBarX:Float = state.healthBar.x;
                    var healthBarY:Float = state.healthBar.y;
                    var healthBarWidth:Float = state.healthBar.width;
                    if (iconP1 != null) iconP1.autoUpdate = false;
                    if (iconP2 != null) iconP2.autoUpdate = false;
                    if (save.data.healthBarPosition == 2) {
                        if (iconP1 != null) iconP1.y = healthBarY + (healthBarWidth / 2) - (state.iconP1.width / 2);
                        if (iconP2 != null) iconP2.y = healthBarY - (healthBarWidth / 2) - (state.iconP2.width / 2);
                        if (iconP1 != null) iconP1.x = healthBarX + (healthBarWidth / 2) - (state.iconP1.width / 2);
                        if (iconP2 != null) iconP2.x = healthBarX + (healthBarWidth / 2) - (state.iconP2.width / 2);
                    } else {
                        // Center icons vertically relative to the health bar
                        if (iconP1 != null) iconP1.y = healthBarY - (iconP1.height / 2);
                        if (iconP2 != null) iconP2.y = healthBarY - (iconP2.height / 2);
                        if (iconP1 != null) iconP1.x = healthBarX + healthBarWidth - (iconP1.width / 2);
                        if (iconP2 != null) iconP2.x = healthBarX - (iconP2.width / 2);
                    }
            }
        }
    }

    function updatePosition() {
        // Vertical Health Icons (WORKING SOMEHOW)
        if (save.data.healthBarPosition == 2 && (save.data.healthIconPos == 1 || save.data.healthIconPos == 2)) {
            var healthBarX:Float = state.healthBar.x;
            var healthBarY:Float = state.healthBar.y;
            var healthBarWidth:Float = state.healthBar.width;
            var yCentering:Float = healthBarWidth / 2 - 15;
            var gapReduction:Float = 5;

            // Move icons horizontally relative to health bar
            iconP1.y = healthBarY
            + (healthBarWidth * (FlxMath.remapToRange(state.healthBar.value, 0, 2, 100, 0) * 0.01) - yCentering
            - POSITION_OFFSET);
            iconP2.y = healthBarY
            + (healthBarWidth * (FlxMath.remapToRange(state.healthBar.value, 0, 2, 100, 0) * 0.01) - yCentering + gapReduction)
            - (iconP2.height - POSITION_OFFSET);

            // Center icons vertically relative to the health bar
            iconP1.x = healthBarX + (healthBarWidth / 2) - (state.iconP1.width / 2);
            iconP2.x = healthBarX + (healthBarWidth / 2) - (state.iconP2.width / 2);

            updateHealthIcon(iconP1, state.health);
            updateHealthIcon(iconP2, MAXIMUM_HEALTH - state.health);
        }
        if (save.data.healthIconPos == 3) {
            updateHealthIcon(iconP1, state.health);
            updateHealthIcon(iconP2, MAXIMUM_HEALTH - state.health);
        }
    }

    function updateHealthIcon(icon:FlxSprite, health:Float):Void {
        if (icon == null) return;
        if (health < LOSING_THRESHOLD) {
            icon.playAnimation("losing");
        } else if (health > WINNING_THRESHOLD) {
            icon.playAnimation("winning");
        } else {
            icon.playAnimation("idle");
        }
    }

    // bop for icons, I think onBeatHit is better than onUpdate and fixes it ?
    override function onBeatHit(event:SongTimeScriptEvent) {
        if (PlayState.instance == null && !loaded) return;
        if (iconP1 != null && !state.isMinimalMode) updatePosition();
    }

    override function onUpdate(event:UpdateScriptEvent) {
        if (PlayState.instance == null || !loaded) return;
        if (event.healthChange != 0 && iconP1 != null && !state.isMinimalMode) updatePosition();
    }

    // Cleanup stuff
    override function onSubStateOpenBegin(event:SubStateScriptEvent) {
        if (!Std.isOfType(event.targetState, PlayState) && !Std.isOfType(event.targetState, PauseSubState)) {
            loaded = false;
        }
    }

    override function onSubStateCloseBegin(event:SubStateScriptEvent) {
        if (Std.isOfType(event.targetState, PlayState)) {
            loaded = false;
        }
    }

    override function onSongEnd(event:ScriptEvent) { loaded = false; }

    override function onDestroy(event:ScriptEvent) { loaded = false; }
}