import funkin.modding.module.Module;
import funkin.play.PauseSubState;
import funkin.play.PlayStatePlaylist;
import funkin.play.PlayState;
import funkin.Highscore;
import funkin.Paths;

import flixel.text.FlxTextBorderStyle;
import flixel.text.FlxText;
import flixel.tweens.FlxTween;
import flixel.util.FlxSave;
import flixel.util.FlxStringUtil;
import flixel.FlxG;

import Math;
import Std;

// This script may have used some code from other scripts so I'll leave credits below
/*
Psych Engine HUD V-Slice by nubz4lif
OG Psych Engine HUD by Shadow Mario and his team
*/
class GamePlayStats extends Module {
    var save:FlxSave;
    var loaded:Bool = false ;
    var state:PlayState;

    var scoreZoom = true ;
    var scoreText:FlxText;
    var scoreTextTween;

    var judgementsText:FlxText;

    var ratingPercent:Float;
    var ratingName:String = "?" ;
    var ratingFC:String;

    var textSize:Int;

    var songScore:Int;

    var tallies:Tallies;
    var talliesLevel:Tallies;
    var sicks:Int = 0 ;
    var goods:Int = 0 ;
    var bads:Int = 0 ;
    var shits:Int = 0 ;
    var missed:Int = 0 ;
    var combo:Int = 0 ;
    var totalNotes:Int = 0 ;
    var totalNotesPlayed:Int = 0 ;

    var badHUDOptions;

    public static var ratingStuff:Array<Dynamic> = [
        ['You Suck!', 20], // From 0% to 19%
        ['Shit', 40], // From 20% to 39%
        ['Bad', 50], // From 40% to 49%
        ['Bruh', 60], // From 50% to 59%
        ['Meh', 69], // From 60% to 68%
        ['Nice', 69], // Exactly 69%
        ['Good', 80], // From 70% to 79%
        ['Great', 90], // From 80% to 89%
        ['Sick!', 100], // From 90% to 99%
        ['Perfect!!', 100] // Perfect is always at 100%
    ] ;

    var excludedSongs = ["Mushroom Plains", "Bricks and Lifts", "Lethal Lava Lair", "Deep Deep Voyage", "Hop-Hop Heights", "Koopa Armada", "2 PLAYER GAME", "Destruction Dance",
    "Portal Power", "Bullet Time", "Boo Blitz", "Cross Console Clash", "Love's End", "Hyperactive Starblaze", "Dream Machine"] ;

    function new() {
        super("GamePlayStats");
        save = new FlxSave();
        save.bind("BadHUDOptions", "FunkinCrew/BadHUD");
    }

    override function onSongLoaded(event:SongLoadScriptEvent) {
        if (PlayState.instance == null) return;
        state = PlayState.instance;
        loaded = true;
        if (excludedSongs.indexOf(state.currentChart.songName) != -1) return;

        tallies = Highscore.tallies;
        state.scoreText.visible = false;

        // Binding with BadHUDOptions for fonts
        badHUDOptions = new BadHUDOptions();
        textSize = save.data.hudFontSize;

        // Create HUD elements
        var scoreTextXPos = 0;
        var scoreTextYPos:Float = save.data.verticalHPBar ? 40 : state.healthBarBG.y + 45;
        var scoringText = 'Score: 0' + ' | Combo Breaks: 0' + ' | Rating: ?\n';
        var scorePosition = "center";

        switch (save.data.leftPos) {
            case 0: // None
            case 1: // Judgements
                initJudgements(textSize);
            case 2: // Score
                scoreTextXPos = 10;
                scoreTextYPos = (FlxG.height * 0.45) - 84 - 10;
                scoringText = 'Score: 0' + '\nCombo Breaks: 0' + '\nRating: ?';
                scorePosition = "left";
            case 3: // Judgements and Score
                initJudgements(textSize);

                scoreTextXPos = 10;
                scoreTextYPos = judgementsText.y - judgementsText.height - 10;
                scoringText = 'Score: 0' + '\nCombo Breaks: 0' + '\nRating: ?';
                scorePosition = "left";
        }

        scoreText = new FlxText(scoreTextXPos, scoreTextYPos, FlxG.width, "", 20);
        scoreText.setFormat(Paths.font(badHUDOptions.font), textSize, 0xFFFFFFFF, scorePosition, FlxTextBorderStyle.OUTLINE, 0xFF000000);
        scoreText.scrollFactor.set();
        scoreText.borderSize = 1.25;
        scoreText.zIndex = 851;

        state.add(scoreText);
        scoreText.cameras = [state.camHUD];

        if (PlayStatePlaylist.isStoryMode) talliesLevel = Highscore.talliesLevel;
    }

    override function onCountdownStart(event:CountdownScriptEvent) {
        totalNotes = tallies.totalNotes;
        if (PlayStatePlaylist.isStoryMode) {
            totalNotes += talliesLevel.totalNotes;
        }
        updateScore();
        resetJudgements();
    }

    function initJudgements(textSize:Int) {
        judgementsText = new FlxText(10, FlxG.height * 0.45, FlxG.width, 'Sicks: 0' + '\nGoods: 0' + '\nBads: 0' + '\nShits: 0', 20);
        judgementsText.setFormat(Paths.font(badHUDOptions.font), textSize, 0xFFFFFFFF, "left", FlxTextBorderStyle.OUTLINE, 0xFF000000);
        judgementsText.scrollFactor.set();
        judgementsText.borderSize = 1.25;
        judgementsText.zIndex = 851;

        state.add(judgementsText);
        judgementsText.cameras = [state.camHUD];
    }

    function calculateRating() {
        if (totalNotesPlayed != 0) {
            switch (save.data.accuracyType) {
                case 0: // Vanilla
                    ratingPercent = Math.min(100, Math.max(0, 100 - ((shits + bads + missed) / totalNotes) * 100));
                case 1: // Psych Engine
                    ratingPercent = Math.min(100, Math.max(0, 100 - ((sicks * 0 + goods * 0.33 + bads * 0.67 + shits * 1) / totalNotes) * 100));
                case 2: // osu!mania
                    ratingPercent = Math.min(100, Math.max(0, ((300 * sicks + 200 * goods + 100 * bads + 50 * shits) / (300 * (sicks + goods + bads + shits + missed))) * 100));
            }
            //ratingPercent = Math.min(1, Math.max(0, totalNotesHit / totalNotesPlayed)); // Old rating percent

            ratingPercent = Math.round(ratingPercent * 100) / 100;
            ratingName = ratingStuff[ratingStuff.length - 1][0];
            if (ratingPercent < 100) {
                for (i in 0...ratingStuff.length - 1) {
                    if (ratingPercent < ratingStuff[i][1]) {
                        ratingName = ratingStuff[i][0];
                        break;
                    }
                }
            }
        } else {
            ratingName = "?";
            ratingPercent = 0;
        }

        ratingFC = '';

        // Rating grades based on
        switch (save.data.accuracyType) {
            case 0: // Vanilla
                vanillaRatingNames();
            case 1: // Psych Engine
                psychRatingNames();
            case 2: // osu!mania
                osuGrades();
        }
    }

    function vanillaRatingNames() {
        if (ratingPercent == 100 && goods == 0) {
            ratingFC = 'P (Perfect+)';
        } else if (ratingPercent == 100 && goods >= 1) {
            ratingFC = 'P (Perfect)';
        } else if (ratingPercent >= 90) {
            ratingFC = 'E (Excellent)';
        } else if (ratingPercent >= 80) {
            ratingFC = 'G (Great)';
        } else if (ratingPercent >= 60) {
            ratingFC = 'G (Good)';
        } else ratingFC = 'L (Loss)';
    }

    function psychRatingNames() {
        if (missed == 0) {
            if (shits == 0 && bads == 0 && goods == 0) ratingFC = 'PFC';
            else if (shits > 0 || bads > 0) ratingFC = 'FC';
            else if (goods > 0) ratingFC = 'GFC';
            else if (sicks > 0) ratingFC = 'SFC';
        } else if (missed < 10) {
            ratingFC = 'SDCB';
        } else ratingFC = 'Clear';
    }

    function osuGrades() {
        if (ratingPercent == 100) {
            ratingFC = 'SS';
        } else if (ratingPercent > 95) {
            ratingFC = 'S';
        } else if (ratingPercent > 90) {
            ratingFC = 'A';
        } else if (ratingPercent > 80) {
            ratingFC = 'B';
        } else if (ratingPercent > 70) {
            ratingFC = 'C';
        } else ratingFC = 'D';
    }

    function doScoreBop() {
        if (!scoreZoom || scoreText == null || !loaded) return;
        if (save.data.leftPos != 2 || save.data.leftPos != 3) return;

        if (scoreTextTween != null) scoreTextTween.cancel();
        scoreText.scale.set(1.075, 1.075);
        scoreTextTween = FlxTween.tween(scoreText.scale, {x: 1, y: 1}, 0.2, {
            onComplete: function(twn:FlxTween) {
                scoreTextTween = null;
            }
        });
    }

    function updateScore(miss:Bool = false) {
        calculateRating();

        var ratingString:String = totalNotesPlayed != 0 ? ratingName + ' (' + ratingPercent + '%) - ' + ratingFC : ratingName;

        // Change the scoring system based on accuracyType (funy)
        if (save.data.accuracyType == 2) {
            var maxScore = 1000000;

            var hitValue = sicks * 300 + goods * 200 + bads * 100 + shits * 50;
            var hitBonusValue = sicks * 32 + goods * 16 + bads * 8 + shits * 4;
            var hitBonus = sicks;
            var hitPunishment = goods * 8 + bads * 24 + shits * 44 + missed * 100;

            var bonus = Math.max(0, Math.min(100, hitBonus - hitPunishment));

            var baseScore = (maxScore * 0.5 / totalNotes) * (hitValue / 300);
            var bonusScore = (maxScore * 0.5 / totalNotes) * (hitBonusValue * Math.sqrt(bonus) / 300);

            songScore = Math.round(baseScore + bonusScore);
        } else {
            songScore = state.songScore;
        }

        if (save.data.commaSeparatedScore) {
            songScore = FlxStringUtil.formatMoney(songScore, false, true);
        }

        // Judgements Screen and Score Bar for update
        var tempScore:String = 'Score: ' + songScore + ' | Combo Breaks: ' + missed + ' | Rating: ' + ratingString;
        var tempJudgements:String = "";

        switch (save.data.leftPos) {
            case 0: // None
            case 1: // Judgements
                tempJudgements = 'Sicks: ' + sicks + '\nGoods: ' + goods + '\nBads: ' + bads + '\nShits: ' + shits;
            case 2: // Score
                ratingString = totalNotesPlayed != 0 ? ratingPercent + '% - ' + ratingFC : ratingName;
                tempScore = 'Score: ' + songScore + '\nCombo Breaks: ' + missed + '\nRating: ' + ratingString + '\nCombo: ' + combo;
            case 3: // Judgements and Score
                ratingString = totalNotesPlayed != 0 ? ratingPercent + '% - ' + ratingFC : ratingName;
                tempJudgements = 'Sicks: ' + sicks + '\nGoods: ' + goods + '\nBads: ' + bads + '\nShits: ' + shits;
                tempScore = 'Score: ' + songScore + '\nCombo Breaks: ' + missed + '\nRating: ' + ratingString + '\nCombo: ' + combo;
        }

        if (judgementsText != null) judgementsText.text = tempJudgements + '\n';
        if (scoreText != null) scoreText.text = tempScore + '\n';

        if (!miss) doScoreBop();
    }

    function resetJudgements() {
        combo = tallies.combo;
        sicks = tallies.sick;
        goods = tallies.good;
        bads = tallies.bad;
        shits = tallies.shit;
        missed = tallies.missed;
        totalNotesPlayed = tallies.totalNotesHit;
        if (PlayStatePlaylist.isStoryMode) {
            sicks += talliesLevel.sick;
            goods += talliesLevel.good;
            bads += talliesLevel.bad;
            shits += talliesLevel.shit;
            missed += talliesLevel.missed;
            totalNotesPlayed += talliesLevel.totalNotesHit;
        }
    }

    override function onUpdate(event:UpdateScriptEvent) {
        if (save.data.accuracyType != 2 && loaded && scoreText != null) updateScore(true);
    }

    override function onNoteHit(event:HitNoteScriptEvent) {
        if (event.healthChange == 0) return;

        if (combo >= 0) combo = tallies.combo + 1;

        switch (event.judgement) {
            case "sick":
                if (sicks >= 0) sicks = (PlayStatePlaylist.isStoryMode ? talliesLevel.sick + tallies.sick : tallies.sick) + 1;
            case "good":
                if (goods >= 0) goods = (PlayStatePlaylist.isStoryMode ? talliesLevel.good + tallies.good : tallies.good) + 1;
            case "bad":
                if (bads >= 0) bads = (PlayStatePlaylist.isStoryMode ? talliesLevel.bad + tallies.bad : tallies.bad) + 1;
            case "shit":
                if (shits >= 0) shits = (PlayStatePlaylist.isStoryMode ? talliesLevel.shit + tallies.shit : tallies.shit) + 1;
        }

        totalNotesPlayed = (PlayStatePlaylist.isStoryMode ? talliesLevel.totalNotesHit + tallies.totalNotesHit : tallies.totalNotesHit) + 1;

        updateScore(true);
    }

    override function onNoteMiss(event:NoteScriptEvent) {
        combo = 0;
        if (missed >= 0) missed = PlayStatePlaylist.isStoryMode ? talliesLevel.missed + tallies.missed + 1 : tallies.missed + 1;
        updateScore(false);
    }

    override function onNoteGhostMiss(event:GhostMissNoteScriptEvent) {
        if (event.healthChange == 0) return;
        updateScore(false);
    }

    // Cleanup stuff
    override function onSubStateOpenBegin(event:SubStateScriptEvent) {
        if (!Std.isOfType(event.targetState, PlayState) && !Std.isOfType(event.targetState, PauseSubState)) {
            cleanup();
        }
    }

    override function onSubStateCloseBegin(event:SubStateScriptEvent) {
        if (Std.isOfType(event.targetState, PlayState)) {
            cleanup();
        }
    }

    override function onSongEnd(event:ScriptEvent) {
        cleanup();
    }

    override function onSongRetry(event:ScriptEvent) { cleanup(); }

    override function onDestroy(event:ScriptEvent) { cleanup(); }

    function cleanup() {
        var stuffToRemove = [scoreText, judgementsText, scoreTextTween];

        for (thing in stuffToRemove) {
            if (thing != null) thing.destroy();
        }

        if (!PlayStatePlaylist.isStoryMode) {
            ratingPercent = 0;
            ratingName = "?";
            ratingFC = "";
        }
        totalNotesPlayed = 0;
        songScore = 0;

        scoreText = null;
        judgementsText = null;
        scoreTextTween = null;

        loaded = false;
    }
}